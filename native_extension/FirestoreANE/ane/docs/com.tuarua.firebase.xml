<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.firebase"><apiName>com.tuarua.firebase</apiName><apiDetail/><apiClassifier id="com.tuarua.firebase:FirestoreANE"><apiName>FirestoreANE</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:FirestoreANE:batch"><apiName>batch</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:WriteBatch</apiOperationClassifier></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:FirestoreANE:collection"><apiName>collection</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:CollectionReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>collectionPath</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:FirestoreANE:disableNetwork"><apiName>disableNetwork</apiName><shortdesc>
     Disables usage of the network by this Firestore instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Disables usage of the network by this Firestore instance. It can be re-enabled by via
     `enableNetwork`. While the network is disabled, any snapshot listeners or get calls
     will return results from cache and any write operations will be queued until the network is
     restored.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:FirestoreANE:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:FirestoreANE:document"><apiName>document</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>documentPath</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:FirestoreANE:enableNetwork"><apiName>enableNetwork</apiName><shortdesc>
     Re-enables usage of the network by this Firestore instance after a prior call to
     `disableNetwork`.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Re-enables usage of the network by this Firestore instance after a prior call to
     `disableNetwork`.
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:FirestoreANE:settings:set"><apiName>settings</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>com.tuarua.firebase.firestore:FirestoreSettings</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirestoreANE:firestore:get"><apiName>firestore</apiName><shortdesc> The ANE instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase:FirestoreANE</apiValueClassifier></apiValueDef><apiDesc> The ANE instance. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirestoreANE:loggingEnabled:get"><apiName>loggingEnabled</apiName><shortdesc> Whether logging from the Firestore client is enabled/disabled.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Whether logging from the Firestore client is enabled/disabled. </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>